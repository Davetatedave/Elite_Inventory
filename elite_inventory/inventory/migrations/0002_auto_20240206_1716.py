# Generated by Django 3.2.19 on 2024-02-06 17:16

from django.db import migrations, models
from django.apps import apps
import re


def rename_tables(apps, schema_editor):
    # Pattern to identify the old app name in table names
    old_app_name_pattern = re.compile(r"^shipping_tracker_")

    # Loop through all models in the app
    for model in apps.get_models():
        # Get the current table name from the model's meta
        old_table_name = model._meta.db_table
        # Check if the current table name follows the pattern of having the old app name
        if old_app_name_pattern.match(old_table_name):
            # Construct the new table name by replacing the old app name with the new app name
            new_table_name = re.sub(old_app_name_pattern, "inventory_", old_table_name)
            # Generate and execute the SQL command to rename the table
            schema_editor.execute(
                f"ALTER TABLE {old_table_name} RENAME TO {new_table_name};"
            )


def reverse_rename_tables(apps, schema_editor):
    # This function does the reverse of the above function for rollback purposes
    # The logic is similar, but you replace 'new_appname_' with 'old_appname_'
    new_app_name_pattern = re.compile(r"^inventory_")

    for model in apps.get_models():
        new_table_name = model._meta.db_table
        if new_app_name_pattern.match(new_table_name):
            old_table_name = re.sub(
                new_app_name_pattern, "old_appname_", new_table_name
            )
            schema_editor.execute(
                f"ALTER TABLE {new_table_name} RENAME TO {old_table_name};"
            )


class Migration(migrations.Migration):

    dependencies = [
        ("inventory", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(rename_tables, reverse_rename_tables),
    ]
